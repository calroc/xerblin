A Step-by-Step Example of the Xerblin User Interface

    (Please note, the following instructions are lengthy to read, but the
    procedure they describe, when performed by one familiar with the
    movements and manipulations involved, is swift and easy and occupies
    perhaps fifteen seconds.)


As an example of the programmability of the Xerblin interface, I'll go
through in painful, step-by-step detail how to create and use a word
that computes the Greatest Common Denominator of two integers.


To create the GCD word we'll need the following words:

    NewLoopWord setname Inscribe lookup swap dup drop meta
    makemacrosequence push tuck mod

as well as the strings:

    loo GCD


Ok, we should be ready to go.


1. Create a new loop word.
    Right click on the word NewLoopWord .  This should put a new blank
    LoopWord on the TOS.

2. Put the name of the loop word onto the stack.
    Double left click on the word loo, BUT DON'T RELEASE THE MOUSE BUTTON
    on the second click--  leave it down and press the RIGHT button once,
    then release BOTH buttons (in any order, it doesn't matter.)
    This will put the string 'loo' onto the stack, pushing down the loop
    word you just created to second place.

3. Set the name.
    Right click on the word setname .  This will set the name of the loop
    word to 'loo'.  You should be able to see the new name in the stack.
    The setname word accepts a name string and an object an the stack, it
    sets the name and "consumes" the string, but it leaves the object on
    the stack.

4. Inscribe the new word into the Dictionary.
    Right click on the word Inscribe, then on the word lookup.  This will
    first "inscribe" the new loop word into your Xerblin dictionary for
    later access under the name 'loo'.  Inscribe leaves the name of the
    inscribed word as a string on the stack, so we can use the lookup
    word to get our loop word back onto the stack.

Interlude
    So now you should have a stack with the following on top of it:
    
        other:   <LoopWord("loo", [])>

    This is your new loop word and it has been Inscribed into your
    dictionary.  We're now going to create the GCD word, which will use
    the loop word to do its work, and then we'll populate the loop with
    the words it needs to do its job.

5. Put the dup word on the stack, under the loop word.
    Right click on the word dup, BUT DON'T RELEASE THE MOUSE BUTTON.
    Instead, click the middle button once, and then release both buttons.
    This should put the dup word onto the stack above loo.

    Right click on the swap word to swap the top two words on the stack.

6. Put the drop word on the stack above the loop word.
    Right click on the word drop, BUT DON'T RELEASE THE MOUSE BUTTON.
    Instead, click the middle button once, and then release both buttons.
    This should put the dup word onto the stack above loo.

    The stack should now look like this:
    
        other:   <xerblin.library.drop instance at 0xb5edf16c>
        other:   <LoopWord("loo", [])>
        other:   <xerblin.library.dup instance at 0xb5ede3cc>

7. Make the stack into a list of words.
    Right click on the word meta. The stack should now look like this:

        list:    [<xerblin.library.dup instance at 0xb5ede3cc>, <LoopWord("l...

8. Put the name "GCD" onto the stack.
    Double left click on the word "GCD", BUT DON'T RELEASE THE MOUSE BUTTON
    on the second click--  leave it down and press the RIGHT button once,
    then release BOTH buttons (in any order, it doesn't matter.)
    This will put the string 'GCD' onto the stack, pushing down the list
    you just created to second place.

9. Create the new GCD SeqWord.
    Right click on the word makemacrosequence.  This will create a new
    SeqWord with GCD as its name and the list of words as its body.  The
    stack should look like this:

        other:   <SeqWord("GCD", ['dup', 'loo', 'drop'])>

10. Inscribe the new word into the Dictionary.
    Right click on the word Inscribe, then on the word drop.

11. Look up the loop word.
    Right click on the word loo, BUT DON'T RELEASE THE MOUSE BUTTON.
    Instead, click the middle button once, and then release both buttons.
    This should put the loo word onto the stack.

12. Look up and push the words of the body of loo.
    The body of the loop consists of the tuck, mod, and dup words, in
    that order.  To add words to the body of the loop word, you must look
    them up with a right-middle-interclick chord and then push them into
    the loop word with the push word.  Like so:
    
    12a. Right click on the word tuck, BUT DON'T RELEASE THE MOUSE BUTTON.
        Instead, click the middle button once, and then release both
        buttons.  This should put the tuck word onto the stack above loo.

    12b. Right click on the word push to push the tuck word into the body
        of the loo word.

    12c. Right click on the word mod, BUT DON'T RELEASE THE MOUSE BUTTON.
        Instead, click the middle button once, and then release both
        buttons.  This should put the mod word onto the stack above loo.

    12d. Right click on the word push to push the mod word into the body
        of the loo word.

    12e. Right click on the word dup, BUT DON'T RELEASE THE MOUSE BUTTON.
        Instead, click the middle button once, and then release both
        buttons.  This should put the dup word onto the stack above loo.

    12f. Right click on the word push to push the dup word into the body
        of the loo word.


At this point you're done.  You can right click on the word drop to drop
the loop word from the stack.  You no longer need to deal with the loop
word.  You use GCD by putting two integers onto the stack and then
executing the GCD word:

    1. Right click on two integers. For instance, 230 and 180.  This will
    put the two integers onto the stack.

    2. Right click on GCD.  You should see the stack change as the
    algorithm finds the answer, and then, after a moment, the correct
    answer will be left on the stack.


Neat, eh?

Some Notes:

You can pickle the Interpreter with the GCD word in its Dictionary and
unpickle it later (on a different machine or OS) and it will still work.

It's fairly easy to recode words made this way into much faster "inline"
words.  This GCD word, for instance, can be recoded in FORTH pretty much
as-is, making its speed approach that of assembly language.  In many
cases this recoding could be done automatically, by the computer, once
testing and use by the user/programmer had shown a word's correctness.

The building block style of program construction is conducive to use by
"non-programmers" such as children or the Baby Boomers.  (The forthcoming
3D GUI makes this even easier.)



Well, thanks for your interest.  I hope this little example starts to
make the concepts behind Xerblin and its UI a little more concrete.  I
feel that I should re-emphasize that although these instructions must seem
very long and tedious the actual construction of the GCD word flows so
smoothly as to make you giddy.

Just a bunch of little funky clicks and you have a brand new subcommand
that will always be available (until you specifically delete it), and
that doesn't require compilation, linking, or even typing to create and
use.


Thanks again, and please email me or the Xerblin group if you have any
questions or comments.

Peace,
~Simon
